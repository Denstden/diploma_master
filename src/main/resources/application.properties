spring.postgres.datasource.url=jdbc:postgresql://localhost:5433/diploma_db1
spring.postgres.datasource.username=postgres
spring.postgres.datasource.password=postgres
spring.postgres.datasource.driverClassName=org.postgresql.Driver

server.port=8083

# Tell Spring Security (if used) to require requests over HTTPS
#security.require-ssl=true

# The format used for the keystore
#server.ssl.key-store-type=PKCS12
# The path to the keystore containing the certificate
#server.ssl.key-store=classpath:keystore.p12
# The password used to generate the certificate
#server.ssl.key-store-password=password
# The alias mapped to the certificate
#server.ssl.key-alias=tomcat

#spring.jpa.generate-ddl=true
#spring.jpa.show-sql=true
#spring.jpa.hibernate.show_sql=true
#logging.level.*=debug
logging.level.ua.kiev=trace
#logging.level.org.hibernate=debug

load.default.configuration.files=false
new.user.role=student
#logging.config=classpath:logback.xml
#logging.level.org.hibernate=debug
#logging.level.org.hibernate.type=trace
#logging.level.org.springframework.security=trace
#management.security.enabled=true

xml.test.configuration.folder=xml


spring.queries.users-query=select email, password, active from User where email=?
spring.queries.roles-query=select u.email, r.role from User u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=?


security.oauth2.resource.filter-order=3

security.signing-key=MaYzkSjmkzPC57L
security.encoding-strength=256
security.security-realm=some-realm

security.jwt.client-id=FDXcjtj@8sqq
security.jwt.client-secret=XY7kmzoNzl100
security.jwt.grant-type=password
security.jwt.scope-read=read
security.jwt.scope-write=write